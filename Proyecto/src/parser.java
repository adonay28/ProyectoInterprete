
import java.util.Date;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 24 00:25:39 VET 2014
//----------------------------------------------------
import AST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 24 00:25:39 VET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\022\002\000\002\002\005\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\007\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\005\000\002\010" +
    "\003\000\002\011\007\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\004\000\002\017" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\011\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\012\006\004\012\014\015\012\016\005\001" +
    "\002\000\006\013\ufffb\014\ufffb\001\002\000\012\004\034" +
    "\005\036\006\027\032\037\001\002\000\004\014\001\001" +
    "\002\000\006\013\ufffe\014\ufffe\001\002\000\004\002\061" +
    "\001\002\000\006\013\ufffd\014\ufffd\001\002\000\014\004" +
    "\034\005\036\006\027\026\040\032\037\001\002\000\006" +
    "\013\ufffc\014\ufffc\001\002\000\012\006\004\012\014\015" +
    "\012\016\005\001\002\000\004\013\016\001\002\000\012" +
    "\017\021\020\020\022\022\023\023\001\002\000\004\012" +
    "\024\001\002\000\004\012\uffdf\001\002\000\004\012\uffe0" +
    "\001\002\000\004\012\uffde\001\002\000\004\012\uffdd\001" +
    "\002\000\012\006\004\012\014\015\012\016\005\001\002" +
    "\000\004\013\026\001\002\000\006\013\uffe1\014\uffe1\001" +
    "\002\000\030\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2" +
    "\021\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\001" +
    "\002\000\012\014\053\027\055\030\057\031\056\001\002" +
    "\000\006\012\046\024\047\001\002\000\010\012\uffeb\024" +
    "\uffeb\025\uffeb\001\002\000\010\012\uffed\024\uffed\025\uffed" +
    "\001\002\000\030\007\uffe4\010\uffe4\011\uffe4\012\uffe4\014" +
    "\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\001\002\000\010\012\uffef\024\uffef\025\044\001\002\000" +
    "\030\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\021\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\001\002\000" +
    "\004\006\042\001\002\000\014\004\034\005\036\006\027" +
    "\026\040\032\037\001\002\000\010\012\uffe6\024\uffe6\025" +
    "\uffe6\001\002\000\004\032\043\001\002\000\030\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\014\uffe5\021\uffe5\024\uffe5\025" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002\000\014\004\034" +
    "\005\036\006\027\026\040\032\037\001\002\000\010\012" +
    "\uffee\024\uffee\025\uffee\001\002\000\012\006\004\012\014" +
    "\015\012\016\005\001\002\000\014\004\034\005\036\006" +
    "\027\026\040\032\037\001\002\000\010\012\ufff0\024\ufff0" +
    "\025\044\001\002\000\004\013\052\001\002\000\006\013" +
    "\ufff1\014\ufff1\001\002\000\012\004\uffea\005\uffea\006\uffea" +
    "\032\uffea\001\002\000\012\004\034\005\036\006\027\032" +
    "\037\001\002\000\012\004\uffe9\005\uffe9\006\uffe9\032\uffe9" +
    "\001\002\000\012\004\uffe7\005\uffe7\006\uffe7\032\uffe7\001" +
    "\002\000\012\004\uffe8\005\uffe8\006\uffe8\032\uffe8\001\002" +
    "\000\010\012\uffec\024\uffec\025\uffec\001\002\000\004\002" +
    "\uffff\001\002\000\004\014\063\001\002\000\004\002\000" +
    "\001\002\000\006\012\077\021\076\001\002\000\012\007" +
    "\073\010\072\012\ufff8\021\ufff8\001\002\000\014\007\ufff6" +
    "\010\ufff6\011\070\012\ufff6\021\ufff6\001\002\000\014\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\021\ufff2\001\002\000\012" +
    "\004\034\005\036\006\027\032\037\001\002\000\014\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\021\ufff3\001\002\000\012" +
    "\004\ufff4\005\ufff4\006\ufff4\032\ufff4\001\002\000\012\004" +
    "\ufff5\005\ufff5\006\ufff5\032\ufff5\001\002\000\012\004\034" +
    "\005\036\006\027\032\037\001\002\000\014\007\ufff7\010" +
    "\ufff7\011\070\012\ufff7\021\ufff7\001\002\000\012\004\034" +
    "\005\036\006\027\032\037\001\002\000\012\006\004\012" +
    "\014\015\012\016\005\001\002\000\004\013\101\001\002" +
    "\000\006\013\ufffa\014\ufffa\001\002\000\012\007\073\010" +
    "\072\012\ufff9\021\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\014\002\007\003\005\004\006\011\010\020" +
    "\012\001\001\000\002\001\001\000\012\005\063\006\064" +
    "\010\065\017\066\001\001\000\004\022\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\030\013\034\014\032\016\031\017\027\001\001\000" +
    "\002\001\001\000\012\003\014\004\006\011\010\020\012" +
    "\001\001\000\002\001\001\000\004\021\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\024\004\006\011" +
    "\010\020\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\040\016\031\017\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\044\016" +
    "\031\017\027\001\001\000\002\001\001\000\012\003\050" +
    "\004\006\011\010\020\012\001\001\000\012\013\047\014" +
    "\032\016\031\017\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\074\017\066\001\001\000\002\001" +
    "\001\000\010\006\101\010\065\017\066\001\001\000\012" +
    "\003\077\004\006\011\010\020\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\073\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opm ::= INT 
            {
              Object RESULT =null;
		
					RESULT="INT";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opm ::= PROC 
            {
              Object RESULT =null;
		
					RESULT="PROC";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opm ::= DIF 
            {
              Object RESULT =null;
		
					RESULT="DIF";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opm ::= UNI 
            {
              Object RESULT =null;
		
					RESULT="UNI";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones ::= IPAREN expresion DPAREN opm IPAREN expresion DPAREN 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT= new NodoOpC(op,a,b);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valores ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoID(a);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valores ::= FECHA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date a = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoFecha(a);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoNumero(a);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valores ::= COMILLAS CADENA COMILLAS 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT= new NodoCadena(cad);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opnot ::= NOT comparacion 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoOpNot(a);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opnot",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opcomp ::= MENOR 
            {
              Object RESULT =null;
		
					RESULT="MENOR";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opcomp ::= MAYOR 
            {
              Object RESULT =null;
		
					RESULT="MAYOR";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opcomp ::= DIFERENTE 
            {
              Object RESULT =null;
		
					RESULT="DIFERENTE";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opcomp ::= EQ 
            {
              Object RESULT =null;
		
					RESULT="EQ";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparacion ::= opnot 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparacion ::= valores opcomp valores 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoOpComp(op,a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opand ::= comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opand",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opand ::= opand AND comparacion 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoOpAO("AND",a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opand",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condiciones ::= opand 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condiciones ::= condiciones OR opand 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoOpAO("OR",a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condiciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // selec ::= SEL condiciones IPAREN expresion DPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT= new NodoSeleccion(a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opmulti ::= valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmulti",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opmulti ::= opmulti MULTI valores 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoOpBinaria("*",a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmulti",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opsure ::= RESTA 
            {
              Object RESULT =null;
		
					RESULT="-";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsure",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opsure ::= SUMA 
            {
              Object RESULT =null;
		
					RESULT="+";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsure",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributo ::= opmulti 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributo ::= atributo opsure opmulti 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoOpBinaria(op,a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributos ::= atributo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributos ::= atributos COMA atributo 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT= new NodoComa(a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proyecc ::= PRO atributos IPAREN expresion DPAREN 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT= new NodoProyeccion(a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proyecc",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= CADENA 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoID(a);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= selec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= proyecc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= query EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // query ::= expresion NT$0 EQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("query",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
					System.out.println("AST construido correctamente");
					Semantico obj = new Semantico();
					obj.obtener_resultado(v);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

