import java.util.Date;

import AST.*;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 18 00:33:40 VET 2014
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 18 00:33:40 VET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\025\003\000\002\002\004\000\002\025" +
    "\004\000\002\026\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\006\003\000\002\006\003\000" +
    "\002\003\007\000\002\014\005\000\002\014\003\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\023\003\000\002\023\003" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\013\003\000\002\004\007\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\003\000\002\017\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\021\003\000" +
    "\002\021\003\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\005\011\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\010\013\014\016\012\017\005\001\002\000" +
    "\012\002\ufffe\013\ufffe\016\ufffe\017\ufffe\001\002\000\006" +
    "\004\063\006\072\001\002\000\014\002\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\001\002\000\014\002\ufffc\013\ufffc" +
    "\014\ufffc\016\ufffc\017\ufffc\001\002\000\014\002\ufffd\013" +
    "\ufffd\014\ufffd\016\ufffd\017\ufffd\001\002\000\012\002\001" +
    "\013\014\016\012\017\005\001\002\000\006\006\036\026" +
    "\034\001\002\000\004\002\031\001\002\000\012\006\015" +
    "\013\014\016\012\017\005\001\002\000\004\014\ufffa\001" +
    "\002\000\004\014\ufff9\001\002\000\004\014\020\001\002" +
    "\000\012\020\024\021\022\023\023\024\025\001\002\000" +
    "\004\013\026\001\002\000\004\013\uffd8\001\002\000\004" +
    "\013\uffd7\001\002\000\004\013\uffd9\001\002\000\004\013" +
    "\uffd6\001\002\000\012\006\015\013\014\016\012\017\005" +
    "\001\002\000\004\014\030\001\002\000\014\002\uffda\013" +
    "\uffda\014\uffda\016\uffda\017\uffda\001\002\000\004\002\000" +
    "\001\002\000\010\013\uffe7\025\056\027\060\001\002\000" +
    "\004\013\053\001\002\000\006\006\036\026\034\001\002" +
    "\000\010\013\uffe5\025\uffe5\027\uffe5\001\002\000\012\015" +
    "\037\030\041\031\043\032\042\001\002\000\010\004\uffe3" +
    "\005\uffe3\007\uffe3\001\002\000\010\004\044\005\045\007" +
    "\046\001\002\000\010\004\uffe2\005\uffe2\007\uffe2\001\002" +
    "\000\010\004\uffe0\005\uffe0\007\uffe0\001\002\000\010\004" +
    "\uffe1\005\uffe1\007\uffe1\001\002\000\010\013\uffdc\025\uffdc" +
    "\027\uffdc\001\002\000\010\013\uffdb\025\uffdb\027\uffdb\001" +
    "\002\000\004\006\050\001\002\000\010\013\uffe4\025\uffe4" +
    "\027\uffe4\001\002\000\004\007\051\001\002\000\010\013" +
    "\uffdd\025\uffdd\027\uffdd\001\002\000\010\013\uffe6\025\uffe6" +
    "\027\uffe6\001\002\000\012\006\015\013\014\016\012\017" +
    "\005\001\002\000\004\014\055\001\002\000\014\002\uffe9" +
    "\013\uffe9\014\uffe9\016\uffe9\017\uffe9\001\002\000\006\006" +
    "\uffdf\026\uffdf\001\002\000\006\006\036\026\034\001\002" +
    "\000\006\006\uffde\026\uffde\001\002\000\004\013\uffe8\001" +
    "\002\000\004\002\uffff\001\002\000\014\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\022\uffea\001\002\000\006\013\ufff6\022" +
    "\110\001\002\000\004\013\105\001\002\000\014\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\022\uffeb\001\002\000\014\010" +
    "\uffed\011\uffed\012\102\013\uffed\022\uffed\001\002\000\012" +
    "\010\074\011\073\013\ufff1\022\ufff1\001\002\000\006\013" +
    "\ufff4\022\ufff4\001\002\000\014\010\074\011\073\012\076" +
    "\013\ufff3\022\ufff3\001\002\000\004\004\uffef\001\002\000" +
    "\004\004\ufff0\001\002\000\004\004\063\001\002\000\004" +
    "\004\063\001\002\000\012\010\074\011\073\013\ufff2\022" +
    "\ufff2\001\002\000\004\004\063\001\002\000\014\010\uffee" +
    "\011\uffee\012\102\013\uffee\022\uffee\001\002\000\004\004" +
    "\063\001\002\000\014\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\022\uffec\001\002\000\012\010\074\011\073\013\ufff5\022" +
    "\ufff5\001\002\000\012\006\015\013\014\016\012\017\005" +
    "\001\002\000\004\014\107\001\002\000\014\002\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\001\002\000\006\004\063" +
    "\006\072\001\002\000\004\013\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\016\002\003\003\007\004\006\005\005\025" +
    "\012\026\010\001\001\000\002\001\001\000\016\007\063" +
    "\010\070\011\067\012\066\013\065\014\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\003\003\007\004\006\005\005\025\061\026\010\001" +
    "\001\000\010\015\032\016\031\017\034\001\001\000\002" +
    "\001\001\000\014\002\015\003\007\004\006\005\005\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\015\003\007\004\006\005\005\006" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\056\001\001\000\002\001\001\000" +
    "\006\016\051\017\034\001\001\000\002\001\001\000\004" +
    "\022\037\001\001\000\002\001\001\000\004\020\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\015\003\007\004\006\005\005\006" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\060\016\031\017\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\077\001\001\000\002" +
    "\001\001\000\004\023\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\103\012\066\013\065\001\001" +
    "\000\010\011\076\012\066\013\065\001\001\000\004\023" +
    "\077\001\001\000\006\012\100\013\065\001\001\000\002" +
    "\001\001\000\004\013\102\001\001\000\002\001\001\000" +
    "\004\023\077\001\001\000\014\002\015\003\007\004\006" +
    "\005\005\006\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\063\010\070\011\067\012\066\013\065" +
    "\014\110\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opm ::= INT 
            {
              String RESULT =null;
		
					RESULT="INT";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opm ::= PROC 
            {
            	String RESULT =null;
		
					RESULT="PROC";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opm ::= DIF 
            {
            	String RESULT =null;
		
					RESULT="DIF";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opm ::= UNI 
            {
            	String RESULT =null;
		
					RESULT="UNI";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opm",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp3 ::= IPAREN expe2 DPAREN opm IPAREN expe2 DPAREN 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT=new NodoOpC(op,a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp25 ::= FECHA 
            {
            	NodoFecha RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date e = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoFecha(e);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp25",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp25 ::= NUMERO 
            {
            	NodoNumero RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoNumero(num);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp25",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp25 ::= COMILLAS CADENA COMILLAS 
            {
            	NodoCadena RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT=new NodoCadena(cad);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp25",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // oplog ::= OR 
            {
              String RESULT =null;
		
					RESULT="OR";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplog",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // oplog ::= AND 
            {
            	String RESULT =null;
			
					RESULT="AND";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplog",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opcomp ::= MENOR 
            {
            	String RESULT =null;
		
					RESULT="MENOR";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opcomp ::= MAYOR 
            {
            	String RESULT =null;
		
					RESULT="MAYOR";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opcomp ::= DIFERENTE 
            {
            	String RESULT =null;
		
					RESULT="DIFERENTE";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opcomp ::= EQ 
            {
            	String RESULT =null;
		
					RESULT="EQ";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcomp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp24 ::= CADENA opcomp exp25 
            {
              NodoBase RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase der = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpComp(op,new NodoCadena(cad),der);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp24",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp23 ::= exp24 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp23",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp23 ::= NOT exp23 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpNot(a);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp23",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp22 ::= exp23 
            {
            	NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp22",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp22 ::= exp23 oplog exp22 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpAO(op,a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp22",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp2 ::= SEL exp22 IPAREN expe2 DPAREN 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT=new NodoSeleccion(a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp15 ::= NUMERO 
            {
            	NodoNumero RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoNumero(e);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp15",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp14 ::= exp15 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp14",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp14 ::= exp14 MULTI exp15 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpBinaria("*",a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp14",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp13 ::= exp14 
            {
            	NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp13",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp13 ::= exp13 opsure exp14 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpBinaria(op,a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp13",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opsure ::= RESTA 
            {
              String RESULT =null;
		
					RESULT="-";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opsure ::= SUMA 
            {
            	String RESULT =null;
		
					RESULT="+";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp12 ::= exp13 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp12 ::= CADENA MULTI exp13 
            {
            	NodoBase RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpBinaria("*",new NodoCadena(cad),b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp11 ::= CADENA 
            {
            	NodoCadena RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoCadena(e);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp11",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp11 ::= exp12 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp11",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp11 ::= CADENA opsure exp13 
            {
            	NodoBase RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoOpBinaria(op,new NodoCadena(cad),b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp11",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp16 ::= exp11 
            {
            	NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp16",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp16 ::= exp11 COMA exp16 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoComa(a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp16",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp1 ::= PRO exp16 IPAREN expe2 DPAREN 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT=new NodoProyeccion(a,b);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expe2 ::= expe 
            {
            	NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expe2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expe2 ::= CADENA 
            {
            	NodoCadena RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=new NodoCadena(cad);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expe2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expe ::= exp3 
            {
            	NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expe",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expe ::= exp2 
            {
            	NodoBase RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expe",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expe ::= exp1 
            {
            	NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expe",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ecuacion ::= expe 
            {
            	NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					System.out.println("AST construido correctamente");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ecuacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sesion ::= ecuacion sesion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sesion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sesion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sesion ::= ecuacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sesion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

